{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"../styles/LiveLocation.css\";\n// function LiveLocation() {\n//   const [location, setLocation] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     if (!navigator.geolocation) {\n//       setError(\"Geolocation is not supported by your browser.\");\n//       return;\n//     }\n\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         setLocation({\n//           latitude: position.coords.latitude,\n//           longitude: position.coords.longitude,\n//         });\n//       },\n//       (err) => {\n//         setError(\"Failed to retrieve location: \" + err.message);\n//       }\n//     );\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Live Location</h2>\n//       {error ? (\n//         <p style={{ color: \"red\" }}>{error}</p>\n//       ) : location ? (\n//         <p>\n//           üìç Latitude: {location.latitude} <br />\n//           üìç Longitude: {location.longitude}\n//         </p>\n//       ) : (\n//         <p>Fetching location...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default LiveLocation;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const locationDisplay = document.getElementById(\"location\");\n  const mapLink = document.getElementById(\"map-link\");\n\n  // Ensure elements exist before accessing them\n  if (!locationDisplay || !mapLink) {\n    console.error(\"Missing required elements in the DOM.\");\n    return;\n  }\n  function getLiveLocation() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.watchPosition(position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        const accuracy = position.coords.accuracy; // Accuracy in meters\n\n        locationDisplay.innerText = `Latitude: ${latitude}, Longitude: ${longitude} (¬±${accuracy}m)`;\n        mapLink.href = `https://www.google.com/maps?q=${latitude},${longitude}`;\n        mapLink.innerText = \"View on Google Maps\";\n        mapLink.style.display = \"block\"; // Make the link visible\n      }, error => {\n        locationDisplay.innerText = `Error: ${error.message}`;\n        mapLink.style.display = \"none\"; // Hide map link on error\n      }, {\n        enableHighAccuracy: true,\n        // Get the most precise location\n        timeout: 5000,\n        // Timeout if location not retrieved in 5s\n        maximumAge: 0 // Always get fresh location data\n      });\n    } else {\n      locationDisplay.innerText = \"Geolocation is not supported by your browser.\";\n    }\n  }\n  getLiveLocation();\n});","map":{"version":3,"names":["document","addEventListener","locationDisplay","getElementById","mapLink","console","error","getLiveLocation","navigator","geolocation","watchPosition","position","latitude","coords","longitude","accuracy","innerText","href","style","display","message","enableHighAccuracy","timeout","maximumAge"],"sources":["C:/Users/HP/OneDrive/Desktop/nirbhayy/frontend/src/components/LiveLocation.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"../styles/LiveLocation.css\";\n// function LiveLocation() {\n//   const [location, setLocation] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     if (!navigator.geolocation) {\n//       setError(\"Geolocation is not supported by your browser.\");\n//       return;\n//     }\n\n//     navigator.geolocation.getCurrentPosition(\n//       (position) => {\n//         setLocation({\n//           latitude: position.coords.latitude,\n//           longitude: position.coords.longitude,\n//         });\n//       },\n//       (err) => {\n//         setError(\"Failed to retrieve location: \" + err.message);\n//       }\n//     );\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Live Location</h2>\n//       {error ? (\n//         <p style={{ color: \"red\" }}>{error}</p>\n//       ) : location ? (\n//         <p>\n//           üìç Latitude: {location.latitude} <br />\n//           üìç Longitude: {location.longitude}\n//         </p>\n//       ) : (\n//         <p>Fetching location...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default LiveLocation;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const locationDisplay = document.getElementById(\"location\");\n  const mapLink = document.getElementById(\"map-link\");\n\n  // Ensure elements exist before accessing them\n  if (!locationDisplay || !mapLink) {\n      console.error(\"Missing required elements in the DOM.\");\n      return;\n  }\n\n  function getLiveLocation() {\n      if (\"geolocation\" in navigator) {\n          navigator.geolocation.watchPosition(\n              (position) => {\n                  const latitude = position.coords.latitude;\n                  const longitude = position.coords.longitude;\n                  const accuracy = position.coords.accuracy; // Accuracy in meters\n\n                  locationDisplay.innerText = `Latitude: ${latitude}, Longitude: ${longitude} (¬±${accuracy}m)`;\n                  mapLink.href = `https://www.google.com/maps?q=${latitude},${longitude}`;\n                  mapLink.innerText = \"View on Google Maps\";\n                  mapLink.style.display = \"block\"; // Make the link visible\n              },\n              (error) => {\n                  locationDisplay.innerText = `Error: ${error.message}`;\n                  mapLink.style.display = \"none\"; // Hide map link on error\n              },\n              {\n                  enableHighAccuracy: true, // Get the most precise location\n                  timeout: 5000, // Timeout if location not retrieved in 5s\n                  maximumAge: 0 // Always get fresh location data\n              }\n          );\n      } else {\n          locationDisplay.innerText = \"Geolocation is not supported by your browser.\";\n      }\n  }\n\n  getLiveLocation();\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD,MAAMC,eAAe,GAAGF,QAAQ,CAACG,cAAc,CAAC,UAAU,CAAC;EAC3D,MAAMC,OAAO,GAAGJ,QAAQ,CAACG,cAAc,CAAC,UAAU,CAAC;;EAEnD;EACA,IAAI,CAACD,eAAe,IAAI,CAACE,OAAO,EAAE;IAC9BC,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;IACtD;EACJ;EAEA,SAASC,eAAeA,CAAA,EAAG;IACvB,IAAI,aAAa,IAAIC,SAAS,EAAE;MAC5BA,SAAS,CAACC,WAAW,CAACC,aAAa,CAC9BC,QAAQ,IAAK;QACV,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;QACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;QAC3C,MAAMC,QAAQ,GAAGJ,QAAQ,CAACE,MAAM,CAACE,QAAQ,CAAC,CAAC;;QAE3Cb,eAAe,CAACc,SAAS,GAAG,aAAaJ,QAAQ,gBAAgBE,SAAS,MAAMC,QAAQ,IAAI;QAC5FX,OAAO,CAACa,IAAI,GAAG,iCAAiCL,QAAQ,IAAIE,SAAS,EAAE;QACvEV,OAAO,CAACY,SAAS,GAAG,qBAAqB;QACzCZ,OAAO,CAACc,KAAK,CAACC,OAAO,GAAG,OAAO,CAAC,CAAC;MACrC,CAAC,EACAb,KAAK,IAAK;QACPJ,eAAe,CAACc,SAAS,GAAG,UAAUV,KAAK,CAACc,OAAO,EAAE;QACrDhB,OAAO,CAACc,KAAK,CAACC,OAAO,GAAG,MAAM,CAAC,CAAC;MACpC,CAAC,EACD;QACIE,kBAAkB,EAAE,IAAI;QAAE;QAC1BC,OAAO,EAAE,IAAI;QAAE;QACfC,UAAU,EAAE,CAAC,CAAC;MAClB,CACJ,CAAC;IACL,CAAC,MAAM;MACHrB,eAAe,CAACc,SAAS,GAAG,+CAA+C;IAC/E;EACJ;EAEAT,eAAe,CAAC,CAAC;AACnB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}