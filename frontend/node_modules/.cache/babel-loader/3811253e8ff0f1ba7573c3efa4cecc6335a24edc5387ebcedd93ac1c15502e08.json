{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/LiveLocation.css\";\nconst LiveLocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [isSharing, setIsSharing] = useState(false);\n  const [sharingTime, setSharingTime] = useState(30); // Default 30 minutes\n  const [error, setError] = useState(null);\n  const getLocation = () => {\n    setError(null);\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const locationData = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setLocation(locationData);\n      }, error => {\n        setError(\"Unable to access your location. Please check your device permissions.\");\n      });\n    } else {\n      setError(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  const startSharing = () => {\n    getLocation();\n    setIsSharing(true);\n\n    // In a real app, this would start a background service to update location\n    // For this demo, we'll just update every 10 seconds\n    const interval = setInterval(() => {\n      getLocation();\n    }, 10000);\n\n    // Store the interval ID so we can clear it later\n    window.locationInterval = interval;\n  };\n  const stopSharing = () => {\n    setIsSharing(false);\n    if (window.locationInterval) {\n      clearInterval(window.locationInterval);\n    }\n  };\n  const handleTimeChange = e => {\n    setSharingTime(parseInt(e.target.value));\n  };\n  const shareWithContacts = () => {\n    if (!location) return;\n  };\n};\n_s(LiveLocation, \"QJqgVaJW1PV+obzOgAAYnqJaAXs=\");\n_c = LiveLocation;\nvar _c;\n$RefreshReg$(_c, \"LiveLocation\");","map":{"version":3,"names":["React","useState","LiveLocation","_s","location","setLocation","isSharing","setIsSharing","sharingTime","setSharingTime","error","setError","getLocation","navigator","geolocation","getCurrentPosition","position","locationData","lat","coords","latitude","lng","longitude","timestamp","Date","toLocaleTimeString","startSharing","interval","setInterval","window","locationInterval","stopSharing","clearInterval","handleTimeChange","e","parseInt","target","value","shareWithContacts","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/nirbhayy/frontend/src/components/LiveLocation.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/LiveLocation.css\";\n\nconst LiveLocation = () => {\n  const [location, setLocation] = useState(null);\n  const [isSharing, setIsSharing] = useState(false);\n  const [sharingTime, setSharingTime] = useState(30); // Default 30 minutes\n  const [error, setError] = useState(null);\n\n  const getLocation = () => {\n    setError(null);\n    \n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const locationData = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n            timestamp: new Date().toLocaleTimeString()\n          };\n          \n          setLocation(locationData);\n        },\n        (error) => {\n          setError(\"Unable to access your location. Please check your device permissions.\");\n        }\n      );\n    } else {\n      setError(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  \n  const startSharing = () => {\n    getLocation();\n    setIsSharing(true);\n    \n    // In a real app, this would start a background service to update location\n    // For this demo, we'll just update every 10 seconds\n    const interval = setInterval(() => {\n      getLocation();\n    }, 10000);\n    \n    // Store the interval ID so we can clear it later\n    window.locationInterval = interval;\n  };\n  \n  const stopSharing = () => {\n    setIsSharing(false);\n    \n    if (window.locationInterval) {\n      clearInterval(window.locationInterval);\n    }\n  };\n  \n  const handleTimeChange = (e) => {\n    setSharingTime(parseInt(e.target.value));\n  };\n  \n  const shareWithContacts = () => {\n    if (!location) return;\n    \n  }\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,4BAA4B;AAEnC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAIE,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAMC,YAAY,GAAG;UACnBC,GAAG,EAAEF,QAAQ,CAACG,MAAM,CAACC,QAAQ;UAC7BC,GAAG,EAAEL,QAAQ,CAACG,MAAM,CAACG,SAAS;UAC9BC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC;QAC3C,CAAC;QAEDpB,WAAW,CAACY,YAAY,CAAC;MAC3B,CAAC,EACAP,KAAK,IAAK;QACTC,QAAQ,CAAC,uEAAuE,CAAC;MACnF,CACF,CAAC;IACH,CAAC,MAAM;MACLA,QAAQ,CAAC,+CAA+C,CAAC;IAC3D;EACF,CAAC;EAED,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzBd,WAAW,CAAC,CAAC;IACbL,YAAY,CAAC,IAAI,CAAC;;IAElB;IACA;IACA,MAAMoB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjChB,WAAW,CAAC,CAAC;IACf,CAAC,EAAE,KAAK,CAAC;;IAET;IACAiB,MAAM,CAACC,gBAAgB,GAAGH,QAAQ;EACpC,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBxB,YAAY,CAAC,KAAK,CAAC;IAEnB,IAAIsB,MAAM,CAACC,gBAAgB,EAAE;MAC3BE,aAAa,CAACH,MAAM,CAACC,gBAAgB,CAAC;IACxC;EACF,CAAC;EAED,MAAMG,gBAAgB,GAAIC,CAAC,IAAK;IAC9BzB,cAAc,CAAC0B,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAAClC,QAAQ,EAAE;EAEjB,CAAC;AACH,CAAC;AAAAD,EAAA,CA3DKD,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}